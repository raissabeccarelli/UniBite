/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Accountpersonale;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountpersonaleRecord extends UpdatableRecordImpl<AccountpersonaleRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>AccountPersonale.username</code>.
     */
    public void setUsername(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>AccountPersonale.username</code>.
     */
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>AccountPersonale.passwordP</code>.
     */
    public void setPasswordp(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>AccountPersonale.passwordP</code>.
     */
    public String getPasswordp() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Accountpersonale.ACCOUNTPERSONALE.USERNAME;
    }

    @Override
    public Field<String> field2() {
        return Accountpersonale.ACCOUNTPERSONALE.PASSWORDP;
    }

    @Override
    public String component1() {
        return getUsername();
    }

    @Override
    public String component2() {
        return getPasswordp();
    }

    @Override
    public String value1() {
        return getUsername();
    }

    @Override
    public String value2() {
        return getPasswordp();
    }

    @Override
    public AccountpersonaleRecord value1(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AccountpersonaleRecord value2(String value) {
        setPasswordp(value);
        return this;
    }

    @Override
    public AccountpersonaleRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountpersonaleRecord
     */
    public AccountpersonaleRecord() {
        super(Accountpersonale.ACCOUNTPERSONALE);
    }

    /**
     * Create a detached, initialised AccountpersonaleRecord
     */
    public AccountpersonaleRecord(String username, String passwordp) {
        super(Accountpersonale.ACCOUNTPERSONALE);

        setUsername(username);
        setPasswordp(passwordp);
    }
}
